'''
[编程题] 简单错误记录
时间限制：1秒

空间限制：65536K

开发一个简单错误记录功能小模块，能够记录出错的代码所在的文件名称和行号。
处理:
1.记录最多8条错误记录，对相同的错误记录(即文件名称和行号完全匹配)只记录一条，错误计数增加；(文件所在的目录不同，文件名和行号相同也要合并)
2.超过16个字符的文件名称，只记录文件的最后有效16个字符；(如果文件名不同，而只是文件名的后16个字符和行号相同，也不要合并)
3.输入的文件可能带路径，记录文件名称不能带路径

输入描述:
一行或多行字符串。每行包括带路径文件名称，行号，以空格隔开。

    文件路径为windows格式

    如：E:\V1R2\product\fpgadrive.c 1325

输出描述:
将所有的记录统计并将结果输出，格式：文件名代码行数数目，一个空格隔开，如: fpgadrive.c 1325 1

    结果根据数目从多到少排序，数目相同的情况下，按照输入第一次出现顺序排序。

    如果超过8条记录，则只输出前8条记录.

    如果文件名的长度超过16个字符，则只输出后16个字符

输入例子1:
E:\V1R2\product\fpgadrive.c 1325

输出例子1:
fpgadrive.c 1325 1
https://www.nowcoder.com/question/next?pid=260145&qid=25367&tid=22493370
'''
import sys
import collections
def mistake_sta(line_all):
    dict_filename_lineorder_numorder = collections.defaultdict(list)
    for line in line_all:

        line_list = line.split(' ', 1)
        name_file_list = line_list[0].split('\\')
        print(name_file_list)
        file_name_and_line = name_file_list[-1] + ' ' + line_list[1]
        if file_name_and_line not in dict_filename_lineorder_numorder:
            dict_filename_lineorder_numorder[file_name_and_line].append(1)
        else:
            times = dict_filename_lineorder_numorder[file_name_and_line][0] + 1
            dict_filename_lineorder_numorder[file_name_and_line][0] = times
    dict_filename_lineorder_numorder_ordered = \
        dict(sorted(dict_filename_lineorder_numorder.items(), key=lambda item:item[1], reverse=True))
    file_name_and_line_list = list(dict_filename_lineorder_numorder_ordered.keys())
    for i in range(8):
        try:
            file_name_line_fin = file_name_and_line_list[i].split(' ', 1)
            print(file_name_line_fin[0][-16:], file_name_line_fin[1],
                  dict_filename_lineorder_numorder[file_name_and_line_list[i]][0])
        except:
            break
if __name__ == '__main__':

    line_all = [r'E:\V1R2\product\fpgfdghdfbcvdfgfadrive.c 1325', r'D:\V1R2\product\fpgfdghdfbcvdfgfadrive.c 1325', r'E:\V1R2\product\fdhhhfadrive.c 1325']
    mistake_sta(line_all)

'''
借鉴
链接：https://www.nowcoder.com/questionTerminal/67df1d7889cf4c529576383c2e647c48
来源：牛客网

import collections

d = collections.OrderedDict()
while 1:
    try:
        x = raw_input()
        if not x:
            break
        i = x.rfind('\\')
        q = x[i + 1:]
        if q in d:
            d[q] += 1
        else:
            d[q] = 1
    except:
        break
d = d.items()
d.sort(key=lambda k: k[1], reverse=True)
for i in range(min(len(d), 8)):
    t = d[i][0].split(' ')
    print t[0][-16:], t[1], d[i][1]

'''

'''

'''
